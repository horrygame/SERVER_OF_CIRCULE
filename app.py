import socket
import threading
import json
import os
import time
from threading import Thread

class GameServer:
    def __init__(self):
        self.HOST = '0.0.0.0'
        self.PORT = int(os.environ.get('PORT', 10000))
        
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.players = {}
        self.bullets = []
        self.lock = threading.Lock()
        self.player_counter = 0
        self.running = True

    def start(self):
        try:
            self.sock.bind((self.HOST, self.PORT))
            self.sock.listen(10)
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.HOST}:{self.PORT}")
            print("‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—É–ª—å
            cleanup_thread = Thread(target=self.cleanup_bullets, daemon=True)
            cleanup_thread.start()
            
            while self.running:
                try:
                    conn, addr = self.sock.accept()
                    print(f"üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {addr}")
                    client_thread = Thread(target=self.handle_client, args=(conn,), daemon=True)
                    client_thread.start()
                except Exception as e:
                    if self.running:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            self.sock.close()

    def cleanup_bullets(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—É–ª—å"""
        while self.running:
            time.sleep(5)
            with self.lock:
                if len(self.bullets) > 100:
                    self.bullets = self.bullets[-50:]
                    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—É–ª—å")

    def handle_client(self, conn):
        player_id = None
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            data = conn.recv(1024).decode('utf-8')
            if not data:
                return
                
            data = json.loads(data)
            
            if data.get("request") == "join":
                with self.lock:
                    self.player_counter += 1
                    player_id = str(self.player_counter)
                    self.players[player_id] = {
                        "id": player_id,
                        "x": 400,
                        "y": 300,
                        "hp": 100,
                        "weapon": "knife",
                        "last_update": time.time()
                    }
                
                print(f"üéÆ –ò–≥—Ä–æ–∫ {player_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(self.players)}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                response = {
                    "status": "connected", 
                    "your_id": player_id,
                    "players": self.players,
                    "bullets": self.bullets
                }
                conn.sendall((json.dumps(response) + "\n").encode('utf-8'))
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.running:
                data = conn.recv(1024).decode('utf-8')
                if not data:
                    break
                    
                data = json.loads(data)
                
                with self.lock:
                    if player_id not in self.players:
                        break

                    player = self.players[player_id]
                    player["last_update"] = time.time()

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
                    if data["request"] == "move":
                        move = data["move"]
                        if move == "left": 
                            player["x"] = max(20, player["x"] - 5)
                        if move == "right": 
                            player["x"] = min(780, player["x"] + 5)
                        if move == "up": 
                            player["y"] = max(20, player["y"] - 5)
                        if move == "down": 
                            player["y"] = min(580, player["y"] + 5)
                    
                    # –°–º–µ–Ω–∞ –æ—Ä—É–∂–∏—è
                    elif data["request"] == "switch_weapon":
                        player["weapon"] = data["weapon"]
                    
                    # –í—ã—Å—Ç—Ä–µ–ª
                    elif data["request"] == "shoot":
                        if player["weapon"] == "gun":
                            self.bullets.append({
                                "id": player_id,
                                "x": player["x"],
                                "y": player["y"],
                                "dir_x": data["dir_x"],
                                "dir_y": data["dir_y"],
                                "created": time.time()
                            })

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                    game_state = {
                        "your_id": player_id,
                        "players": self.players,
                        "bullets": self.bullets
                    }
                    conn.sendall((json.dumps(game_state) + "\n").encode('utf-8'))
                    
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ JSON –æ—Ç –∏–≥—Ä–æ–∫–∞ {player_id}: {e}")
        except Exception as e:
            if self.running:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {player_id}: {e}")
        finally:
            if player_id:
                with self.lock:
                    if player_id in self.players:
                        del self.players[player_id]
                print(f"üéÆ –ò–≥—Ä–æ–∫ {player_id} –æ—Ç–∫–ª—é—á–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {len(self.players)}")
            try:
                conn.close()
            except:
                pass

    def stop(self):
        self.running = False
        try:
            self.sock.close()
        except:
            pass

if __name__ == "__main__":
    server = GameServer()
    try:
        server.start()
    except KeyboardInterrupt:
        print("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        server.stop()
